{"version":3,"sources":["components/Chat.js","App.js","serviceWorker.js","index.js"],"names":["theme","background","fontFamily","headerBgColor","headerFontColor","headerFontSize","botBubbleColor","botFontColor","userBubbleColor","userFontColor","Chat","state","loaded","joke","steps","id","message","trigger","user","options","value","label","end","handleFetch","a","newJoke","fetch","then","res","json","data","setState","newSteps","this","botAvatar","headerTitle","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"2TAIMA,EAAQ,CACVC,WAAY,UACZC,WAAY,iBACZC,cAAe,UACfC,gBAAiB,OACjBC,eAAgB,OAChBC,eAAgB,UAChBC,aAAc,QACdC,gBAAiB,UACjBC,cAAe,SAgGJC,E,4MA3FXC,MAAQ,CACJC,QAAQ,EACRC,KAAM,GACNC,MAAO,CACH,CACEC,GAAI,IACJC,QAAS,qBACTC,QAAS,KAEX,CACEF,GAAI,IACJG,MAAM,EACND,QAAS,KAEX,CACEF,GAAI,IACJC,QAAS,sBACTC,QAAS,KAEX,CACIF,GAAI,IACJC,QAAS,iCACTC,QAAS,KAEb,CACIF,GAAI,IACJI,QAAS,CACL,CAAEC,MAAO,EAAGC,MAAO,MAAOJ,QAAS,KACnC,CAAEG,MAAO,EAAGC,MAAO,KAAMJ,QAAS,OAG1C,CACIF,GAAI,IACJC,QAAS,GACTM,KAAK,GAET,CACIP,GAAI,IACJC,QAAS,+DACTM,KAAK,K,EAqBjBC,Y,sBAAc,8BAAAC,EAAA,6DACNC,EAAU,GADJ,SAGJC,MAAM,qDACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACFL,EAAUK,EAAKjB,KACf,EAAKkB,SAAS,CAAElB,KAAMiB,EAAKjB,UAPzB,QAUNmB,EAAW,EAAKrB,MAAMG,OAEjB,GAAGE,QAAUS,EAEtB,EAAKM,SAAS,CAAEjB,MAAOkB,EAAUpB,QAAQ,IAd/B,2C,kEAHVqB,KAAKV,gB,+BAqBL,OACI,6BACI,kBAAC,gBAAD,CAAevB,MAAOA,GACjBiC,KAAKtB,MAAMC,OACR,kBAAC,IAAD,CAASE,MAAOmB,KAAKtB,MAAMG,MAC3BoB,UAAU,sHACVC,YAAY,YACN,+C,GAvFXC,aCDJC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OACf,kBAAC,EAAD,SCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMvC,c","file":"static/js/main.98bfee21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport { ThemeProvider } from 'styled-components';\n\nconst theme = {\n    background: '#F5B700',\n    fontFamily: 'Helvetica Neue',\n    headerBgColor: '#DC0073',\n    headerFontColor: '#fff',\n    headerFontSize: '15px',\n    botBubbleColor: '#89FC00',\n    botFontColor: 'black',\n    userBubbleColor: '#008BF8',\n    userFontColor: 'black',\n};\n\nclass Chat extends Component {\n\n    state = {\n        loaded: false,\n        joke: \"\",\n        steps: [\n            {\n              id: '1',\n              message: 'What is your name?',\n              trigger: '2',\n            },\n            {\n              id: '2',\n              user: true,\n              trigger: '3',\n            },\n            {\n              id: '3',\n              message: 'Hi {previousValue}!',\n              trigger: '4',\n            },\n            {\n                id: '4',\n                message: 'Would you like to hear a joke?',\n                trigger: '5',\n            },\n            {\n                id: '5',\n                options: [\n                    { value: 1, label: 'Yes', trigger: '6' },\n                    { value: 2, label: 'No', trigger: '7' },\n                ]\n            },\n            {\n                id: '6',\n                message: '',\n                end: true,\n            },\n            {\n                id: '7',\n                message: 'Ok, come back when you want to have your funny bone tickled!',\n                end: true,\n            },\n            // {\n            //     id: '8',\n            //     message: 'Would you like to hear another joke?',\n            //     trigger: '9',\n            // },\n            // {\n            //     id: '9',\n            //     options: [\n            //         { value: 1, label: 'Yes', trigger: '6' },\n            //         { value: 2, label: 'No', trigger: '7' },\n            //     ]\n            // },\n          ]\n    }\n\n    componentDidMount () {\n        this.handleFetch()\n    }\n\n    handleFetch = async () => {\n        let newJoke = \"\"\n\n        await fetch('https://sv443.net/jokeapi/v2/joke/Any?type=single')\n            .then(res => res.json())\n            .then(data => {\n                newJoke = data.joke; \n                this.setState({ joke: data.joke })\n            })\n\n        let newSteps = this.state.steps\n\n        newSteps[5].message = newJoke\n\n        this.setState({ steps: newSteps, loaded: true })\n    }\n\n    render () {\n        return(\n            <div>\n                <ThemeProvider theme={theme} >\n                    {this.state.loaded ? \n                        <ChatBot steps={this.state.steps} \n                        botAvatar=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTgcbLtWksT0B8vxfl4FdQe7bEw6ja_WzUfVdzckgtVg2sw2g2f&usqp=CAU\"\n                        headerTitle=\"JokeBOT\"/> \n                            : <p>Loading...</p>}\n                </ThemeProvider>\n            </div>\n        )\n    }\n}\nexport default Chat;\n","import React from 'react';\nimport ChatBot from 'react-simple-chatbot';\nimport './App.css';\nimport Chat from './components/Chat';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"bot\">\n      <Chat/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}